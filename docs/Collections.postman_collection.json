{
	"info": {
		"_postman_id": "b99a25e2-d716-4ba1-9e62-f2f9be3bc6d0",
		"name": "Collections",
		"description": "Manage collections with a breeze",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9632890"
	},
	"item": [
		{
			"name": "Collections",
			"item": [
				{
					"name": "Get a list of available collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json; charset=utf-8"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/collections",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections"
							]
						},
						"description": "Get a list of available collections"
					},
					"response": [
						{
							"name": "The list of collections",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": 1,\n    \"name\": \"Books\",\n    \"owner\": \"Martijn\",\n    \"logo\": \"/collections/books/assets/logo.png\",\n    \"brandColor\": \"#ff0088\"\n  },\n  {\n    \"id\": 1,\n    \"name\": \"Books\",\n    \"owner\": \"Martijn\",\n    \"logo\": \"/collections/books/assets/logo.png\",\n    \"brandColor\": \"#ff0088\"\n  }\n]"
						}
					]
				},
				{
					"name": "Create a new collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Books\",\n    \"owner\": \"Martijn van Nieuwenhoven\",\n    \"logo\": \"/collections/books/assets/logo.png\",\n    \"brandColor\": \"#0283ff\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/collections",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections"
							]
						},
						"description": "Create a new collection"
					},
					"response": [
						{
							"name": "The newly created collection object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Books\",\n    \"owner\": \"Martijn van Nieuwenhoven\",\n    \"logo\": \"/collections/books/assets/logo.png\",\n    \"brandColor\": \"#0283ff\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/collections",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"name\": \"Books\",\n  \"owner\": \"Martijn\",\n  \"logo\": \"/collections/books/assets/logo.png\",\n  \"brandColor\": \"#ff0088\"\n}"
						}
					]
				},
				{
					"name": "Get a single collection object",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json; charset=utf-8"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/collections/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "41463891"
								}
							]
						},
						"description": "Get a single collection object"
					},
					"response": [
						{
							"name": "The requested collection object",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"name\": \"Books\",\n  \"owner\": \"Martijn\",\n  \"logo\": \"/collections/books/assets/logo.png\",\n  \"brandColor\": \"#ff0088\"\n}"
						}
					]
				},
				{
					"name": "404 when not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-mock-response-code",
								"value": "404",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/collections/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "-1"
								}
							]
						},
						"description": "404 not found"
					},
					"response": []
				},
				{
					"name": "Update a single collection object",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Cars\",\n    \"owner\": \"Sarah van Nieuwenhoven\",\n    \"logo\": \"/collections/books/assets/logo.png\",\n    \"brandColor\": \"#0f453\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/collections/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "41463891"
								}
							]
						},
						"description": "Update a single collection object"
					},
					"response": [
						{
							"name": "The updated collection object",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Cars\",\n    \"owner\": \"Sarah van Nieuwenhoven\",\n    \"logo\": \"/collections/books/assets/logo.png\",\n    \"brandColor\": \"#0f453\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 1,\n  \"name\": \"Books\",\n  \"owner\": \"Martijn\",\n  \"logo\": \"/collections/books/assets/logo.png\",\n  \"brandColor\": \"#ff0088\"\n}"
						},
						{
							"name": "When the collection object is not found",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Cars\",\n    \"owner\": \"Sarah van Nieuwenhoven\",\n    \"logo\": \"/collections/books/assets/logo.png\",\n    \"brandColor\": \"#0f453\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/collections/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				},
				{
					"name": "Delete a single collection object",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json; charset=utf-8"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/collections/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "41463891"
								}
							]
						},
						"description": "Delete a single collection object"
					},
					"response": [
						{
							"name": "When successfully deleted",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				}
			],
			"description": "Operations for managing collections"
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "Get a list of available categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json; charset=utf-8"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/collections/:id/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":id",
								"categories"
							],
							"variable": [
								{
									"key": "id",
									"value": "41463891"
								}
							]
						},
						"description": "Get a list of available categories"
					},
					"response": [
						{
							"name": "The list of categories",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:id/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":id",
										"categories"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": 10347462,\n    \"name\": \"laboris dolore\",\n    \"collectionId\": -63910479,\n    \"itemCount\": -72221662\n  },\n  {\n    \"id\": 74681801,\n    \"name\": \"ea sed\",\n    \"collectionId\": -65982995,\n    \"itemCount\": -74149044\n  }\n]"
						}
					]
				},
				{
					"name": "Create a new category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Books\",\n    \"owner\": \"Martijn van Nieuwenhoven\",\n    \"logo\": \"/categories/books/assets/logo.png\",\n    \"brandColor\": \"#0283ff\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories"
							]
						},
						"description": "Create a new category"
					},
					"response": [
						{
							"name": "The newly created category object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Books\",\n    \"owner\": \"Martijn van Nieuwenhoven\",\n    \"logo\": \"/categories/books/assets/logo.png\",\n    \"brandColor\": \"#0283ff\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 65274854,\n  \"name\": \"am\",\n  \"collectionId\": 67889600,\n  \"itemCount\": 59853646\n}"
						}
					]
				},
				{
					"name": "Get a single category object",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json; charset=utf-8"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/categories/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "41463891"
								}
							]
						},
						"description": "Get a single category object"
					},
					"response": [
						{
							"name": "The requested category object",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 65274854,\n  \"name\": \"am\",\n  \"collectionId\": 67889600,\n  \"itemCount\": 59853646\n}"
						},
						{
							"name": "When the category object is not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				},
				{
					"name": "Update a single category object",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Cars\",\n    \"owner\": \"Sarah van Nieuwenhoven\",\n    \"logo\": \"/categories/books/assets/logo.png\",\n    \"brandColor\": \"#0f453\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/categories/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "41463891"
								}
							]
						},
						"description": "Update a single category object"
					},
					"response": [
						{
							"name": "The updated category object",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Cars\",\n    \"owner\": \"Sarah van Nieuwenhoven\",\n    \"logo\": \"/categories/books/assets/logo.png\",\n    \"brandColor\": \"#0f453\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/categories/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": 65274854,\n  \"name\": \"am\",\n  \"collectionId\": 67889600,\n  \"itemCount\": 59853646\n}"
						},
						{
							"name": "When the category object is not found",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Cars\",\n    \"owner\": \"Sarah van Nieuwenhoven\",\n    \"logo\": \"/categories/books/assets/logo.png\",\n    \"brandColor\": \"#0f453\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/categories/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				},
				{
					"name": "Delete a single category object",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json; charset=utf-8"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/categories/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "41463891"
								}
							]
						},
						"description": "Delete a single category object"
					},
					"response": [
						{
							"name": "When successfully deleted",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{}"
						},
						{
							"name": "When the category object is not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				}
			],
			"description": "Operations for managing categories"
		},
		{
			"name": "Items",
			"item": [
				{
					"name": "Get a list of available items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json; charset=utf-8"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/collections/:id/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections",
								":id",
								"items"
							],
							"variable": [
								{
									"key": "id",
									"value": "41463891"
								}
							]
						},
						"description": "Get a list of available items"
					},
					"response": [
						{
							"name": "The list of items",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:id/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":id",
										"items"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": 65535332,\n    \"name\": \"irure aliqua dolore\",\n    \"img\": \"ut minim\",\n    \"collectionId\": -42157574,\n    \"categoryId\": -3853721\n  },\n  {\n    \"id\": 27508834,\n    \"name\": \"co\",\n    \"img\": \"amet cillum pariat\",\n    \"collectionId\": -93995267,\n    \"categoryId\": -73257060\n  }\n]"
						}
					]
				},
				{
					"name": "Create a new item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Books\",\n    \"owner\": \"Martijn van Nieuwenhoven\",\n    \"logo\": \"/items/books/assets/logo.png\",\n    \"brandColor\": \"#0283ff\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							]
						},
						"description": "Create a new item"
					},
					"response": [
						{
							"name": "The newly created item object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Books\",\n    \"owner\": \"Martijn van Nieuwenhoven\",\n    \"logo\": \"/items/books/assets/logo.png\",\n    \"brandColor\": \"#0283ff\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/items",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": -45096809,\n  \"name\": \"Ut nisi in enim\",\n  \"img\": \"sed irure magna culpa\",\n  \"collectionId\": 72061154,\n  \"categoryId\": -77907050\n}"
						}
					]
				},
				{
					"name": "Get a single item object",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json; charset=utf-8"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/items/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								"1"
							]
						},
						"description": "Get a single item object"
					},
					"response": [
						{
							"name": "The requested item object",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/items/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": -45096809,\n  \"name\": \"Ut nisi in enim\",\n  \"img\": \"sed irure magna culpa\",\n  \"collectionId\": 72061154,\n  \"categoryId\": -77907050\n}"
						},
						{
							"name": "When the item object is not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/items/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				},
				{
					"name": "Update a single item object",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json; charset=utf-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Cars\",\n    \"owner\": \"Sarah van Nieuwenhoven\",\n    \"logo\": \"/items/books/assets/logo.png\",\n    \"brandColor\": \"#0f453\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/items/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "41463891"
								}
							]
						},
						"description": "Update a single item object"
					},
					"response": [
						{
							"name": "The updated item object",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Cars\",\n    \"owner\": \"Sarah van Nieuwenhoven\",\n    \"logo\": \"/items/books/assets/logo.png\",\n    \"brandColor\": \"#0f453\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/items/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": -45096809,\n  \"name\": \"Ut nisi in enim\",\n  \"img\": \"sed irure magna culpa\",\n  \"collectionId\": 72061154,\n  \"categoryId\": -77907050\n}"
						},
						{
							"name": "When the item object is not found",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Cars\",\n    \"owner\": \"Sarah van Nieuwenhoven\",\n    \"logo\": \"/items/books/assets/logo.png\",\n    \"brandColor\": \"#0f453\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/items/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				},
				{
					"name": "Delete a single item object",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json; charset=utf-8"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/items/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "Delete a single item object"
					},
					"response": [
						{
							"name": "When successfully deleted",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/items/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"items",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				}
			],
			"description": "Operations for managing items"
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000/api/v1"
		}
	]
}